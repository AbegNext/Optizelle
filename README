Parameter Estimation Using Optimization (PEOpt) 

--------------------------------DESCRIPTION---------------------------------
The library PEOpt contains a collection of routines implementing matrix-free
algorithms for optimization.  This includes unconstrained as well as
general inequality constrained problems.  Its particular focus is on providing
abstractions for users who require control of the underlying linear algebra
and communication structure.  As such, it is particularly well suited for
large scale optimization.

-------------------------HEADERS ONLY INSTALLATION--------------------------
In order to install a headers only installation with no examples or unit tests,

    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=/dir/to/install/location ../src
    make install

This installs the appropriate PEOpt headers to the directory

    /dir/to/install/location/include/peopt

---------------------------ADVANCED INSTALLATION----------------------------
The following flags can be configured inside of cmake.  We recommend using
ccmake or a graphical utility in order to manage the dependencies between
options.  In this case, we build with the following:

    mkdir build
    cd build
    ccmake ../src
    make
    make install

For a detailed description of the PEOpt specific flags, see below

Flag:         ENABLE_CPP_LIBRARY
Type:         Bool
Default:      Off
Dependencies: BLAS_LIBRARY, LAPACK_LIBRARY, JSONCPP_INCLUDE_DIR, JSONCPP_LIBRARY
Autodetect?:  No
Description:  Enables the the library build for PEOpt.  This includes the
              built-in vector spaces for real vectors or cone programming.

Flag:         ENABLE_CPP_EXAMPLES
Type:         Bool
Default:      Off
Dependencies: ENABLE_CPP_LIBRARY
Autodetect?:  No
Description:  Enables the build and installation of simple examples that
              demonstrate the use of PEOpt.  These examples are installed to
              the directory ${CMAKE_INSTALL_PREFIX}/share/peopt/cpp/examples.

Flag:         ENABLE_CPP_UNIT
Type:         Bool
Default:      Off
Dependencies: ENABLE_CPP_LIBRARY, BOOST_UNIT_TEST_INCLUDE_DIR,
              BOOST_UNIT_TEST_LIBRARY
Autodetect?:  No
Description:  Enables the build and installation of unit tests that help
              validate the PEOpt code.  These tests are installed to the
              directory ${CMAKE_INSTALL_PREFIX}/share/peopt/cpp/unit.

Flag:         ENABLE_OPENMP
Type:         Bool
Default:      Off
Dependencies: ENABLE_CPP_LIBRARY
Autodetect?:  No
Description:  Toggles whether or not the PEOpt library should be compiled
              using OpenMP.  This primarily affect whether or not the
              prepackaged vector spaces are coded to run in parallel using
              threads.

Flag:         ENABLE_PYTHON
Type:         Bool
Default:      Off
Dependencies: ENABLE_CPP_LIBRARY, PYTHON_INCLUDE_DIR, PYTHON_LIBRARY
Autodetect?:  No
Description:  Enables the build and installation of the Python wrappers for
              PEOpt.  The resulting Python module is installed to
              ${CMAKE_INSTALL_PREFIX}/share/peopt/python.  As such, make
              sure that the PYTHONPATH includes this directory.  In addition,
              using this module assumes that libpeopt_complete.so can be found
              in the LD_LIBRARY_PATH.

Flag:         ENABLE_PYTHON_EXAMPLES
Type:         Bool
Default:      Off
Dependencies: ENABLE_PYTHON_LIBRARY
Autodetect?:  No
Description:  Enables the build and installation of examples that use the
              Python wrappers for PEOpt.  These examples are installed into
              the directory ${CMAKE_INSTALL_PREFIX}/share/peopt/python/examples.

Flag:         ENABLE_MATLAB
Type:         Bool
Default:      Off
Dependencies: ENABLE_CPP_LIBRARY, MATLAB_INCLUDE_DIR, MATLAB_LIBRARY,
              MATLAB_MEX_EXTENSION
Autodetect?:  No
Description:  Enables the build and installation of the MATLAB wrappers for
              PEOpt.  The resulting MATLAB mex file is installed to
              ${CMAKE_INSTALL_PREFIX}/share/peopt/matlab.  As such, make
              sure that the MATLAB path includes this directory. 

Flag:         ENABLE_MATLAB_EXAMPLES
Type:         Bool
Default:      Off
Dependencies: ENABLE_MATLAB_LIBRARY
Autodetect?:  No
Description:  Enables the build and installation of examples that use the
              MATLAB wrappers for PEOpt.  These examples are installed into
              the directory ${CMAKE_INSTALL_PREFIX}/share/peopt/matlab/examples.

Flag:         BLAS_LIBRARY 
Type:         Path 
Default:      None 
Dependencies: ENABLE_CPP_LIBRARY
Autodetect?:  Yes 
Description:  A semicolon separated list of the complete path and library used
              to provide BLAS.  This must include all required libraries in
              order to successfully compile a BLAS dependent application.  For
              example, using ATLAS BLAS, one possible entry is:
              /usr/lib/libf77blas.a;/usr/lib/libatlas.a

Flag:         LAPACK_LIBRARY 
Type:         Path 
Default:      None 
Dependencies: ENABLE_CPP_LIBRARY
Autodetect?:  Yes 
Description:  A semicolon separated list of the complete path and library used
              to provide LAPACK.  This must include all required libraries,
              except for BLAS libraries above in BLAS_LIBRARY, in order to
              successfully compile a LAPACK dependent application.  For example,
              using ATLAS LAPACK, one possible entry is:
              /usr/lib/liblapack.a;/usr/lib/libcblas.a;/usr/lib/libgfortran.so.3
              
Flag:         BOOST_UNIT_TEST_INCLUDE_DIR 
Type:         Path 
Default:      None 
Dependencies: ENABLE_CPP_UNIT
Autodetect?:  Yes 
Description:  A path that indicates where the boost headers for unit testing
              have been installed.  The actual header must be found at
              ${BOOST_UNIT_TEST_INCLUDE_DIR}/boost/test/unit_test.hpp.

Flag:         BOOST_UNIT_TEST_LIBRARY
Type:         Path 
Default:      None 
Dependencies: ENABLE_CPP_UNIT
Autodetect?:  Yes 
Description:  The complete path and library for the boost unit test framework. 

Flag:         JSONCPP_INCLUDE_DIR 
Type:         Path 
Default:      None 
Dependencies: ENABLE_CPP_LIBRARY
Autodetect?:  Yes 
Description:  A path that indicates where the jsoncpp headers have been 
              installed.  The actual headers must be found in 
              ${JSONCPP_INCLUDE_DIR}/json/.

Flag:         JSONCPP_LIBRARY
Type:         Path 
Default:      None 
Dependencies: ENABLE_CPP_LIBRARY
Autodetect?:  Yes 
Description:  The complete path and library for jsoncpp. 

Flag:         PYTHON_INCLUDE_DIR 
Type:         Path 
Default:      None 
Dependencies: ENABLE_PYTHON
Autodetect?:  Yes 
Description:  A path that indicates where the Python 2.7 headers have been 
              installed.  We do not prefix these headers, so we look directly
              in the directory provided here.

Flag:         PYTHON_LIBRARY
Type:         Path 
Default:      None 
Dependencies: ENABLE_PYTHON
Autodetect?:  Yes 
Description:  The complete path and library for Python 2.7. 

Flag:         MATLAB_INCLUDE_DIR 
Type:         Path 
Default:      None 
Dependencies: ENABLE_MATLAB
Autodetect?:  Yes 
Description:  A path that indicates where the MATLAB headers have been 
              installed.  We do not prefix these headers, so we look directly
              in the directory provided here.

Flag:         MATLAB_LIBRARY
Type:         Path 
Default:      None 
Dependencies: ENABLE_MATLAB
Autodetect?:  Yes 
Description:  The complete path and library for the mex library.  Typically,
              this is libmex.so on Linux.

Flag:         MATLAB_MEX_EXTENSION
Type:         String 
Default:      None 
Dependencies: ENABLE_MATLAB
Autodetect?:  No 
Description:  The extension of mex files on the system.  This can be found
              by typing in the command 'mexext' inside of MATLAB.  Note, copy
              the output from 'mexext' directly and do not add a '.'.
